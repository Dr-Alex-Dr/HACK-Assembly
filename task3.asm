//for (i = 0; i < n; i++) {
//    for (j = 1; j < n; j*=2) {
//        RAM[i] = RAM[i] + RAM[108 + j]
//    }
//}

// Устанавливаем начального значения i = 0
@0      // Загружаем 0 в регистр A
D=A     // Копируем значение A в D (D = 0)
@i      // Устанавливаем A на адрес переменной i
M=D     // Сохраняем значение D в RAM[i]


// Устанвливаем значения n = 10 (количество итераций, для примера возьмем 10)
@10     // Загружаем 10 в регистр A
D=A     // Копируем значение A в D (D = 10)
@n      // Устанавливаем A на адрес переменной n
M=D     // Сохраняем значение D в RAM[n]

// Метка начала внешнего цикла FOR 
(FOR)
    // Проверка условия завершения цикла
    @i
    D=M         // Загружаем значение RAM[i] в D (D = RAM[i])
    @n
    D=D-M       // Вычитаем значение RAM[n] из D (D = RAM[i] - RAM[n])
    @FOR_END
    D;JGE       // Если D >= 0 (i >= n), переход к метке FOR_END (выходим из цикла)

    // Установка начального значения j = 1
    @1          // Загружаем 1 в регистр A
    D=A         // Копируем значение А в D (D = 1)
    @j          // Устанавливаем A на адрес переменной j
    M=D         // Сохраняем значение D в RAM[j] (RAM[j] = 1)

    // Метка начала внутреннего цикла INNER_FOR
    (INNER_FOR)
        // Проверка условия завершения цикла
        @j      
        D=M     // Загружаем значение RAM[j] в D (D = RAM[j])
        @n
        D=D-M   // Вычитаем значение RAM[n] из D (D = RAM[j] - RAM[n])
        @INNER_FOR_END
        D;JGE   // Если D >= 0 (j >= n), переход к метке INNER_FOR_END (выходим из цикла)


        @j
        D=M     // Загружаем значение RAM[j] в D (D = RAM[j])
        @108
        D=A+D   // Добавляем 108 к D (D = RAM[j] + 108)
        A=D     // Устанавливаем A на новый адрес (A = 108 + RAM[j])
        D=M     // Загружаем значение RAM[108 + j] в D (D = RAM[108 + j])
        @i
        A=M     // Загружаем значение RAM[i] в A (A = RAM[i])
        M=M+D   // RUM[i] = RUM[i] + RAM[108 + j]


        // j *= 2 (удвоение j)
        @j
        D=M     // Загружаем значение RAM[j] в D (D = RAM[j])
        D=D+D   // Удваиваем значение D с помощью сложения (D = RAM[j] + RAM[j])
        @j
        M=D     // Сохраняем значение D в RAM[j] (RAM[j] = RAM[j] * 2)

        @INNER_FOR
        0;JMP   // Переход к началу внутреннего цикла INNER_FOR

    // Метка конца внутреннего цикла INNER_FOR
    (INNER_FOR_END)

    // Прибавляем к i единицу
    @i
    M=M+1       // Увеличиваем значение RAM[i] на 1 (RAM[i] = RAM[i] + 1)

    // Сбрасываем j в ноль
    @j 
    M=0

    @FOR
    0;JMP   // Переход к началу внешнего цикла FOR

// Метка конца внешнего цикла FOR
(FOR_END)


(END)
@END
0;JMP

        
